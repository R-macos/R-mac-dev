#!/usr/bin/perl

$root='/www/R-mac-dev';
$src="$root/.scripts";
$run="$src/web";
$builds="$src/builds";
$dbase=$base=$root;

@bstyles=("Debug", "Release"); ## "Deployment", "Deployment64", "Leopard", "Leopard64", "SnowLeopard64");

open IN, "$builds";
@rds=<IN>;
close IN;
chomp @rds;

# @pf=('i386','ppc','x86_64'); ## ppc64 is no longer supported
#@pf=('i386','ppc','x86_64','ppc64'); 
@pf=('arm64','x86_64');
$rsuff='sa-x86_64';

$talt=0;
## New: use last-success for the main downloads
open OUT1, ">$run/R-main.html";
print OUT1 "<table class='build noborder'><thead class='build noborder'><tr><th>Build</th><th>OS</th><th>Download</th></tr></thead>\n<tbody class='build noborder'>\n";
my @rrds = reverse @rds;
foreach $rd (@rrds) {
    my $last_os='';
    my ($os,$rd) = split /\//, $rd;
    foreach $arch (@pf) {
	my $pkg = "$dbase/$os-$arch/$rd/$rd-$arch.pkg";
	if ( -e "$pkg" ) {
	    print "[processing installer package $pkg]\n";
	    my @rv = `$src/pkg-ver $pkg $src/rver.c`;
	    my $ver=$rv[0];
            my $sz=`ls -lh $pkg|awk '{print \$5}'`;
            chop $sz;
	    my $showos = "$os-$arch";
	    if ($last_os eq $showos) { $showos=''; } else { $last_os = $showos; $talt++; }
	    $talt=1 if ($talt > 2);
	    my $trc="build alt-$talt";
	    my $ainfo = ($arch eq 'arm64') ? '<br>(for M1/M2 Macs only!)' : '<br>(for Intel Macs)';
	    print OUT1 "<tr class='$trc'><td><b>$rd</b><br>$ver</td><td>$showos</td><td>Installer: <a href='$os-$arch/$rd/$rd-$arch.pkg'>$rd-$arch.pkg</a> (${sz}b, notarized)$ainfo</td></tr>\n";
	}
	if (0) { ## disable .xz list for now 
	my $lsbase = "$dbase/$os/last-success/$rd-$arch";
	if ( -e "$lsbase.tar.xz" ) {
	    print "[processing $lsbase.tar.xz]\n";
	    my @rv=`(rm -f '$run/rver.h' '$run/rver'; xzcat '$lsbase.tar.xz' | tar fxO - --wildcards 'R.framework/*/Rversion.h' > '$run/rver.h' 2>/dev/null; gcc -o '$run/rver' -I '$run' '$src/rver.c' && '$run/rver')`;
	    my $ver=$rv[0];
            my $sz=`ls -lh $lsbase.tar.xz|awk '{print \$5}'`;
            chop $sz;
	    my $showos = "$os-$arch";
	    if ($last_os eq $showos) { $showos=''; } else { $last_os = $showos; $talt++; }
	    $talt=1 if ($talt > 2);
	    my $trc="build alt-$talt";
	    print OUT1 "<tr class='$trc'><td><b>$rd</b><br>$ver</td><td>$showos</td><td>Framework only: <a href=$os/last-success/$rd-$arch.tar.xz>$rd-$arch.tar.xz</a> (${sz}b)<br>(for automation, regular users please use installer)</td></tr>";
	}
	}
    }
}
print OUT1 "</tbody></table>\n";
close OUT1;

open OUT, ">$run/R-builds.html";
print OUT "<table class='build noborder'><thead class='build noborder'><tr><th>Build</th><th>OS</th><th>Date</th><th>Status</th><th>Download</th></tr></thead>\n<tbody class='build noborder'>\n";

foreach $rd (@rds) {
    ($os,$rd) = split /\//, $rd;
    $talt++;
    $talt=1 if ($talt > 2);
    $trc="build alt-$talt";
    undef @rv;
    print " - processing $os $rd\n";
    if ( -e "$dbase/$os/$rd/$rd-$os-$rsuff.tar.gz" )  {
	@rv=`(rm -f '$run/rver.h' '$run/rver'; tar fxzO '$dbase/$os/$rd/$rd-$os-$rsuff.tar.gz' --wildcards 'Library/Frameworks/R.framework/*/Rversion.h' > '$run/rver.h'; gcc -o '$run/rver' -I '$run' '$src/rver.c' && '$run/rver')`;
    } elsif ( -e "$dbase/$os/$rd/x86_64/$rd.tar.gz" )  {
	@rv=`(rm -f '$run/rver.h' '$run/rver'; tar fxzO '$dbase/$os/$rd/x86_64/$rd.tar.gz' --wildcards 'Library/Frameworks/R.framework/*/Rversion.h' > '$run/rver.h'; gcc -o '$run/rver' -I '$run' '$src/rver.c' && '$run/rver')`;
    } elsif ( -e "$dbase/$os/$rd/arm64/$rd.tar.gz" )  {
	@rv=`(rm -f '$run/rver.h' '$run/rver'; tar fxzO '$dbase/$os/$rd/arm64/$rd.tar.gz' --wildcards 'Library/Frameworks/R.framework/*/Rversion.h' > '$run/rver.h'; gcc -o '$run/rver' -I '$run' '$src/rver.c' && '$run/rver')`;
    }
    $ver=$rv[0]; # $ver=~s/\.$//;
#    $ver=~s/development /development<br>/;
    $rl1="<tr class='$trc'><td><b>$rd</b><br>$ver</td><td>$os</td>";
    $rl='';
    $lkf='';
    $dl='';
    foreach (@pf) {
	if ( -e "$dbase/$os/$rd/$_/SUCCESS" || -e "$dbase/$os/$rd/$_/FAILED" ) {
	    if (-e "$dbase/$os/$rd/$_/SUCCESS") {
		print "   old-style, OK\n";
		$rl.="<b>$_</b>: OK (<a href=\"logs/log-$rd.$os.$_.html\">log</a>)<br>"; $lkf="$dbase/$os/$rd/$_/SUCCESS";
	    } elsif (-e "$dbase/$os/$rd/$_/FAILED") {
		print "   old-style, FAILED\n";
		$sf=`cat $dbase/$os/$rd/$_/FAILED`;
		$bl=`cat $dbase/$os/$rd/$_/build.log`;
		$rl.="<b>$_</b>: $sf (<a href=\"logs/log-$rd.$os.$_.html\">log</a>)<br>";
		$lkf="$dbase/$os/$rd/$_/FAILED";
	    } else {
#		$rl.="MISSING<br>";
	    }
	} elsif ( -e "$dbase/$os/$rd/$_/$rd.SUCCESS" || -e "$dbase/$os/$rd/$_/$rd.FAILED" ) {
	    if (-e "$dbase/$os/$rd/$_/$rd.SUCCESS") {
		print "   R4, OK\n";
		$rl.="<b>$_</b>: OK (<a href=\"logs/log-$rd.$os.$_.html\">log</a>)<br>"; $lkf="$dbase/$os/$rd/$_/$rd.SUCCESS";
	    } elsif (-e "$dbase/$os/$rd/$_/$rd.FAILED") {
		print "   R4, FAILED\n";
		$sf=`cat $dbase/$os/$rd/$_/$rd.FAILED`;
		$bl=`cat $dbase/$os/$rd/$_/build.log`;
		$rl.="<b>$_</b>: $sf (<a href=\"logs/log-$rd.$os.$_.html\">log</a>)<br>";
		$lkf="$dbase/$os/$rd/$_/FAILED";
	    } else {
#		$rl.="MISSING<br>";
	    }
	}
    }
    if (-e "$dbase/$os/$rd/universal/SUCCESS") {
        $rl.="<b>universal</b>: OK<br>";
        $lkf="$dbase/$os/$rd/universal/SUCCESS";
        if (-e "$dbase/$os/$rd/universal/$rd-$os-universal.tar.gz") {
            $sz=`ls -lh $dbase/$os/$rd/universal/$rd-$os-universal.tar.gz|awk '{print \$5}'`;
            chop $sz;
            $dl="<a href=$rd-$os-universal.tar.gz>$rd-$os-universal.tar.gz</a> (${sz}b)";
        }
        $dmg=`ls $dbase/$os/$rd/universal/$rd-*.dmg 2>/dev/null|sort|tail -n 1`; chop $dmg;
        if ($dmg ne '' && (-e $dmg)) {
            $sz=`ls -lh $dmg|awk '{print \$5}'`;
            $dmg=`basename \"$dmg\"`; chop $dmg;
            chop $sz;
            $dl.="<br><a href=$dmg>$dmg</a> (${sz}b, installer incl. GUI)";
        }
        $lpkg="$dbase/$os/$rd/universal/$rd-$os.pkg";
        if ( -e $lpkg ) {           
            $sz=`ls -lh $lpkg|awk '{print \$5}'`;
            $lpkg=`basename \"$lpkg\"`; chop $lpkg;
            chop $sz;
            $dl.="<br><br><a href=$lpkg>$lpkg</a> (${sz}b, installer incl. GUI)";       
        }
#       if ($os eq 'leopard' && $rd=~/^R-2.9-/) { ## manual override!
#           $dl.="<br>(For an installer package see the <b>Leopard build</b> section below)";
#       }
    } elsif (-e "$dbase/$os/$rd/universal/FAILED") {
        $sf=`cat $dbase/$os/$rd/universal/FAILED`;
        $rl.="<b>universal</b>: <font colot=red><b>FAILED</b></font>: $sf<br>";
        $lkf="$dbase/$os/$rd/universal/FAILED";
    }
    if (-e "$dbase/$os/$rd/$rd.pkg") {
	$rl.="<b>Package:</b> OK<br>";
	#	$lkf="$dbase/$os/$rd/universal/SUCCESS";
	foreach $arch (@pf) {
	    if (-e "$dbase/$os/$rd/$arch/$rd.tar.gz") {
		$sz=`ls -lh $dbase/$os/$rd/$arch/$rd.tar.gz|awk '{print \$5}'`;
		chop $sz;
		$dl="<br><a href=$os/$rd/$arch/$rd.tar.gz>$arch/$rd.tar.gz</a> ($arch, ${sz}b)";
	    }
	}
	$lpkg="$dbase/$os/$rd/$rd.pkg";
	if ( -e $lpkg ) {	    
	    $lkf = $lpkg;
	    $sz=`ls -lh $lpkg|awk '{print \$5}'`;
	    $lpkg=`basename \"$lpkg\"`; chop $lpkg;
	    chop $sz;
	    $dl.="<br><br><a href=$os/$rd/$lpkg>$lpkg</a> (${sz}b, installer incl. GUI)";
	}
    } elsif (-e "$dbase/$os-x86_64/$rd/$rd.pkg" || -e "$dbase/$os-arm64/$rd/$rd.pkg") {
	foreach $arch (@pf) {
	    if (-e "$dbase/$os/$rd/$arch/$rd.tar.gz") {
		$sz=`ls -lh $dbase/$os/$rd/$arch/$rd.tar.gz|awk '{print \$5}'`;
		chop $sz;
		$dl.="<br><a href=$os/$rd/$arch/$rd.tar.gz>$arch/$rd.tar.gz</a> ($arch, ${sz}b)";
	    }
	    if (-e "$dbase/$os/last-success/$rd-$arch.tar.xz") {
		$sz=`ls -lh $dbase/$os/last-success/$rd-$arch.tar.xz|awk '{print \$5}'`;
		chop $sz;
		$dl.="<br><a href=$os/last-success/$rd-$arch.tar.xz>$rd-$arch.tar.xz</a> ($arch framework, ${sz}b)";
	    }
	    $lpkg="$dbase/$os-$arch/$rd/$rd-$arch.pkg";
	    $lpkg="$dbase/$os-$arch/$rd/$rd.pkg" if (! -e $lpkg );
	    if ( -e $lpkg ) {	    
		$lkf = $lpkg;
		$sz=`ls -lh $lpkg|awk '{print \$5}'`;
		$lpkg=`basename \"$lpkg\"`; chop $lpkg;
		chop $sz;
		$dl.="<br><a href=$os-$arch/$rd/$lpkg>$lpkg</a> (${sz}b, installer incl. GUI)<br>";
	    }
	}
    } elsif (-e "$dbase/$os/$rd/x86_64/$rd.tar.gz" || -e "$dbase/$os/$rd/arm64/$rd.tar.gz") {
	$rl.="<b>Package:</b> <font color=red>FAILED</font><br>";
	foreach $a (@pf) {
	    if (-e "$dbase/$os/$rd/$a/$rd.tar.gz") {
		$sz=`ls -lh $dbase/$os/$rd/$a/$rd.tar.gz|awk '{print \$5}'`;
		chop $sz;
		$dl="<br><a href=$os/$rd/$a/$rd.tar.gz>$rd.tar.gz</a> ($a, ${sz}b)";
	    }
	}
    } elsif (-e "$dbase/$os/$rd/$rd-$os.pkg") {
	$rl.="<b>Package:</b> OK<br>";
#	$lkf="$dbase/$os/$rd/universal/SUCCESS";
	if (-e "$dbase/$os/$rd/$rd-$os-$rsuff.tar.gz") {
	    $sz=`ls -lh $dbase/$os/$rd/$rd-$os-$rsuff.tar.gz|awk '{print \$5}'`;
	    chop $sz;
	    $dl="<br><a href=$os/$rd/$rd-$os-$rsuff.tar.gz>$rd-$os-$rsuff.tar.gz</a> (${sz}b)";
	}
	$lpkg="$dbase/$os/$rd/$rd-$os-signed.pkg";
	if ( -e $lpkg ) {	    
	    $lkf = $lpkg;
	    $sz=`ls -lh $lpkg|awk '{print \$5}'`;
	    $lpkg=`basename \"$lpkg\"`; chop $lpkg;
	    chop $sz;
	    $dl.="<br><br><a href=$os/$rd/$lpkg>$lpkg</a> (${sz}b, installer incl. GUI)";
	} else {
	    $lpkg="$dbase/$os/$rd/$rd-$os.pkg";
	    if ( -e $lpkg ) {	    
		$lkf = $lpkg;
		$sz=`ls -lh $lpkg|awk '{print \$5}'`;
		$lpkg=`basename \"$lpkg\"`; chop $lpkg;
		chop $sz;
		$dl.="<br><br><a href=$os/$rd/$lpkg>$lpkg</a> (${sz}b, installer incl. GUI)";	    
	    }
	}
#	if ($os eq 'leopard' && $rd=~/^R-2.9-/) { ## manual override!
#	    $dl.="<br>(For an installer package see the <b>Leopard build</b> section below)";
#	}
    } elsif (-e "$dbase/$os/$rd/universal/FAILED") {
	$sf=`cat $dbase/$os/$rd/universal/FAILED`;
	$rl.="<b>Package</b>: <font color=red><b>FAILED</b></font>: $sf<br>";
	$lkf="$dbase/$os/$rd/universal/FAILED";
    }
    $lkd='';
    $lkd=`ls -l "$lkf" |awk '{print \$6,\$7,\$8}'` if ($lkf ne '');
    chop $lkd;

    $logs='';

    @suff=('check','conf','build');
    foreach $a (@pf) {
	print " - generating log-$rd.$os.$a.html\n";
	open LOUT, ">$run/log-$rd.$os.$a.html";
	print LOUT "<h2>$rd, $os, $a</h2>";
	foreach(@suff) { print LOUT "<a href=#$_>$_</a>&nbsp;&nbsp;&nbsp;"; };
	print LOUT "<hr><table bgcolor=#ffffe0 border=0 cellspacing=0 cellpadding=3>";
	foreach $pf (@suff) {
	    $fc=($pf=~/err$/)?"#c00000":"#0000c0";
	    $fn="$dbase/$os/$rd/$a/$pf";
	    if ( -e "$dbase/$os/$rd/$a/$rd.$pf" ) { $fn="$dbase/$os/$rd/$a/$rd.$pf" }
	    $da=`stat -c '\%y' $fn 2>/dev/null`; $da=~s/\".*?\"//; $da=$1 if ($da=~/\"(.*?)\"/);
	    print LOUT "<tr bgcolor=#c8c8ff><td><a name=\"$pf\"></a><b>$pf</b> - <b><i>$da</i></b></td></tr><tr><td><font color=$fc><pre>";
	    open INA, "$fn"; while(<INA>) {
		#s/</&lt;/g;
		#s/>/&gt;/g;
		s/\#\@1\@\#/<font color=navy>/g;
		s/\#\@2\@\#/<br><font color=red>/g;
		s/\@\#.\#\@/<\/font>/g;
		print LOUT $_;
	    }; close INA;
	    print LOUT "</pre></font></td></tr>\n";
	}
	print LOUT "</table>";
	close LOUT;
    }
    if ($dl eq '') {
	$rl="$rl1<td>$lkd</td><td colspan=2>$rl</td></tr>\n";
    } else {
	$rl="$rl1<td>$lkd</td><td>$rl</td><td>$dl</td></tr>\n";
    }
    print OUT $rl;

    foreach $bsty (@bstyles) {
	foreach $arch (@pf) {
	    $gf=`ls $dbase/$os/$rd/R-GUI*-$arch-$bsty.dmg 2>/dev/null|sort -r|head -n 1`;
	    $gf=~s/[\r\n]+//g;
	    push @guilist, $gf if ($gf ne '');
	    $gf=`ls $dbase/$os/$rd/universal/R-GUI*-$arch-$bsty.dmg 2>/dev/null|sort -r|head -n 1`;
	    $gf=~s/[\r\n]+//g;
	    push @guilist, $gf if ($gf ne '');
	}
    }
}

print OUT "</tbody></table>\n";
close OUT;

open OUT, ">$run/GUI.html";
print OUT "<table class='gui noborder'><thead class='gui noborder'><tr><th>Version</th><th>Build</th><th>Download</th></tr></thead>\n<tbody class='gui noborder'>\n";

$trc=''; $talt=0;
foreach (@guilist) {
    $gfn=$_;
    $lnk=$_;
    if (/\/universal/) {
	s/^.*\///;
	$lnk=$_;
    } else {
	$lnk=~s/.*deploy\///;
	$lnk=~s/.*R-mac-dev\///;
	s/^.*\///;
    }
    $rl='';
    $talt++;
    $talt=1 if ($talt > 2);
    $trc="gui alt-$talt";
    if (/GUI-(\d+)-(\d+\.\d+)-(.*)/) {
	$rl="<tr class='$trc'><td>Mac OS X GUI rev. $1 for R $2.x</td><td>$3</td><td><a href=$lnk>$_</a></td></tr>\n";
    }
    print OUT $rl;
}

print OUT "</tbody></table>\n";
close OUT;

sub fetch { my($a); $a=''; open INF,"$run/$_[0]"; while(<INF>) { $a.=$_; }; close INF; $a; };

open IN, "$base/index.in.html";
open OUT, ">$run/index.html";
while(<IN>) {
    s/<!--include (.*?)-->/fetch($1)/ge;
    print OUT $_;
}
close IN;
close OUT;
